/* 0.12.3 */import { Expression } from '../../math-json/math-json-format';
import { BoxedDomain, BoxedExpression, BoxedSubstitution, DomainCompatibility, DomainConstructor, DomainExpression, DomainLiteral, IComputeEngine, Metadata, PatternMatchOptions } from '../public';
import { AbstractBoxedExpression } from './abstract-boxed-expression';
/**
 * A `_BoxedDomain` is a wrapper around a boxed, canonical, domain expression.
 *
 * If could also be an error, in which case, `isValid` is `false`.
 *
 */
export declare class _BoxedDomain extends AbstractBoxedExpression implements BoxedDomain {
    /** The value of a boxed domain is either a string if a domain literal, or a
     * domain constructor function.
     * Since the domains are alway canonicalized when boxed, their value can
     * be represented by a simple array, without the need for extra boxing.
     */
    _value: DomainExpression<BoxedExpression>;
    private _hash;
    constructor(ce: IComputeEngine, dom: DomainExpression, metadata?: Metadata);
    get isCanonical(): boolean;
    /** Boxed domains are always canonical. */
    get canonical(): _BoxedDomain;
    get isValid(): boolean;
    get json(): Expression;
    get literal(): string | null;
    get ctor(): DomainConstructor | null;
    get domainArgs(): (string | BoxedExpression | DomainExpression<BoxedExpression>)[] | null;
    get domainArg1(): string | BoxedExpression | DomainExpression<BoxedExpression> | null;
    get codomain(): BoxedDomain | null;
    get hash(): number;
    isEqual(rhs: BoxedExpression): boolean;
    isSame(rhs: BoxedExpression): boolean;
    is(rhs: any): boolean;
    isCompatible(dom: BoxedDomain | DomainLiteral, compatibility?: DomainCompatibility): boolean;
    match(rhs: BoxedExpression, _options?: PatternMatchOptions): BoxedSubstitution | null;
    get head(): string;
    get domain(): BoxedDomain;
    get isNothing(): boolean;
    get isFunction(): boolean;
    get isNumeric(): boolean;
    get isRelationalOperator(): boolean;
}
/**
 * Note that `boxDomain()` should only be called from `ComputeEngine`.
 * This gives a chance for `ComputeEngine` to substitute cached objects.
 */
export declare function boxDomain(ce: IComputeEngine, dom: BoxedDomain | DomainExpression, metadata?: Metadata): BoxedDomain;
/** Validate that `expr` is a Domain */
export declare function isDomain(expr: Expression | BoxedExpression | BoxedDomain | DomainExpression): expr is BoxedDomain | DomainExpression;
/** Return the ancestor domain that is shared by both `a` and `b` */
export declare function sharedAncestorDomain(a: BoxedDomain, b: BoxedDomain): BoxedDomain;
