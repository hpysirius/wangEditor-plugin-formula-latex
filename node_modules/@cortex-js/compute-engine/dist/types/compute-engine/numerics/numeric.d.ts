/* 0.12.3 */import Complex from 'complex.js';
import Decimal from 'decimal.js';
import { BoxedExpression } from '../public';
export declare const MACHINE_PRECISION_BITS = 53;
export declare const MACHINE_PRECISION: number;
export declare const MACHINE_TOLERANCE_BITS = 7;
export declare const MACHINE_TOLERANCE: number;
export declare const NUMERIC_TOLERANCE: number;
export declare const SMALL_INTEGER = 1000000;
export declare const MAX_ITERATION = 1000000;
export declare const MAX_SYMBOLIC_TERMS = 200;
/**
 * Returns the smallest floating-point number greater than x.
 * Denormalized values may not be supported.
 */
export declare function nextUp(x: number): number;
export declare function nextDown(x: number): number;
export declare const SMALL_PRIMES: Set<number>;
export declare const LARGEST_SMALL_PRIME = 7919;
export declare function primeFactors(n: number): {
    [factor: number]: number;
};
/** Return `[factor, root]` such that
 * pow(n, 1/exponent) = factor * pow(root, 1/exponent)
 *
 * factorPower(75, 2) -> [5, 3] = 5^2 * 3
 *
 */
export declare function factorPower(n: number, exponent: number): [factor: number, root: number];
export declare function gcd(a: number, b: number): number;
export declare function lcm(a: number, b: number): number;
export declare function factorial(n: number): number;
export declare function lngamma(z: number): number;
export declare function gamma(z: number): number;
export declare function fromDigits(s: string, base?: number): [value: number, rest: string];
export declare function asFloat(expr: BoxedExpression): number | null;
export declare function asBignum(expr: BoxedExpression): Decimal | null;
export declare function asSmallInteger(expr: BoxedExpression): number | null;
export declare function chop(n: number, tolerance: number): number;
export declare function chop(n: Decimal, tolerance: number): 0 | Decimal;
export declare function chop(n: Complex, tolerance: number): 0 | Complex;
